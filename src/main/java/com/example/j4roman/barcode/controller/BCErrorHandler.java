package com.example.j4roman.barcode.controller;

import com.example.j4roman.barcode.service.dto.ErrorResponseDTO;
import com.example.j4roman.barcode.controller.utils.BCInvalidFieldFormatException;
import com.example.j4roman.barcode.service.exceptions.EntityAlreadyExistsException;
import com.example.j4roman.barcode.service.exceptions.EntityDoesNotExistException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.NoHandlerFoundException;

/**
 * General error handler
 */
@RestControllerAdvice
public class BCErrorHandler {

    private static final String ERRORCODE_COMMON_PART = "Barcode.Error";
    private static final String ERRORCODE_INTERNAL = "InternalError";
    private static final String ERRORCODE_MALFORMED = "BadRequest.MalformedRequest";
    private static final String ERRORCODE_INVALID_FORMAT = "BadRequest.InvalidFieldsFormat";
    private static final String ERRORCODE_INVALID_HTTP_METHOD = "BadRequest.InvalidHttpMethod";
    private static final String ERRORCODE_ALREADY_EXISTS = "BadRequest.Create.AlreadyExists";
    private static final String ERRORCODE_NOT_EXISTS = "BadRequest.ReadUpdateDelete.NotExists";
    private static final String ERRORCODE_NOT_FOUND = "BadRequest.Url.NotFound";
    private static final String ERRORCODE_ACCESS_DENIED = "BadRequest.Security.AccessDenied";

    private static final Logger log = LoggerFactory.getLogger(BCErrorHandler.class);

    // Handles request body format errors (generated by com.example.j4roman.barcode.controller.utils.BCValidator)
    @ExceptionHandler(BCInvalidFieldFormatException.class)
    public ResponseEntity<ErrorResponseDTO> handleFormatError(BCInvalidFieldFormatException e) {
        return getSimpleResponse(e, ERRORCODE_INVALID_FORMAT, HttpStatus.BAD_REQUEST);
    }

    // Handles JSON message format errors (generated by system)
    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ErrorResponseDTO> handleMalformedError(HttpMessageNotReadableException e) {
        return getSimpleResponse(e, ERRORCODE_MALFORMED, HttpStatus.BAD_REQUEST);
    }

    // Handles wrong http method and URL path errors (generated by system)
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<ErrorResponseDTO> handleWrongHttpMethod(HttpRequestMethodNotSupportedException e) {
        return getSimpleResponse(e, ERRORCODE_INVALID_HTTP_METHOD, HttpStatus.BAD_REQUEST);
    }

    // Handles cases when entity (to create) from request already exists (generated by Service layer exceptions)
    @ExceptionHandler(EntityAlreadyExistsException.class)
    public ResponseEntity<ErrorResponseDTO> handleAlreadyExists(EntityAlreadyExistsException e) {
        return getSimpleResponse(e, ERRORCODE_ALREADY_EXISTS, HttpStatus.BAD_REQUEST);
    }

    // Handles cases when entity (to update) from request doesn't exist (generated by Service layer exceptions)
    @ExceptionHandler(EntityDoesNotExistException.class)
    public ResponseEntity<ErrorResponseDTO> handleNotExist(EntityDoesNotExistException e) {
        return getSimpleResponse(e, ERRORCODE_NOT_EXISTS, HttpStatus.BAD_REQUEST);
    }

    // Handles "Not Found" errors
    @ExceptionHandler(NoHandlerFoundException.class)
    public ResponseEntity<ErrorResponseDTO> handleNoHandlerFound(NoHandlerFoundException e) {
        return getSimpleResponse(e, ERRORCODE_NOT_FOUND, HttpStatus.NOT_FOUND);
    }

    // Handles security's AccessDenied errors
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<ErrorResponseDTO> handleAccessDenied(AccessDeniedException e) {
        return getNoDescriptionResponse(e, ERRORCODE_ACCESS_DENIED, HttpStatus.UNAUTHORIZED);
    }

    // Handles security's authentication errors
    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ErrorResponseDTO> handleAuthenticationError(AuthenticationException e) {
        return getNoDescriptionResponse(e, ERRORCODE_ACCESS_DENIED, HttpStatus.UNAUTHORIZED);
    }

    // Handles all other cases
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponseDTO> handleError(Exception e) {
        return getSimpleResponse(e, ERRORCODE_INTERNAL, HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // Simple response generator
    private static ResponseEntity<ErrorResponseDTO> getSimpleResponse(Exception e, String errorCode, HttpStatus httpStatus) {
        log.error("Exception occurred: ", e);
        ErrorResponseDTO errorResponse = new ErrorResponseDTO(ERRORCODE_COMMON_PART + "." + errorCode, e);
        return new ResponseEntity<>(errorResponse, httpStatus);
    }

    // No description response generator (for AccessDenied and Unauthorized errors)
    private static ResponseEntity<ErrorResponseDTO> getNoDescriptionResponse(Exception e, String errorCode, HttpStatus httpStatus) {
        log.error("Exception occurred: ", e);
        ErrorResponseDTO errorResponse = new ErrorResponseDTO(ERRORCODE_COMMON_PART + "." + errorCode);
        return new ResponseEntity<>(errorResponse, httpStatus);
    }
}
